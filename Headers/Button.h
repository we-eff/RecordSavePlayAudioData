/*
The MIT License (MIT)

Copyright (c) 2016 British Broadcasting Corporation.
This software is provided by Lancaster University by arrangement with the BBC.

Permission is hereby granted, free of charge, to any person obtaining a
copy of this software and associated documentation files (the "Software"),
to deal in the Software without restriction, including without limitation
the rights to use, copy, modify, merge, publish, distribute, sublicense,
and/or sell copies of the Software, and to permit persons to whom the
Software is furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in
all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL
THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
DEALINGS IN THE SOFTWARE.
*/

/* 
 * File:   Button.h
 * Author: We Eff
 *
 * Created on November 7, 2016, 1:21 PM
 */

#ifndef BUTTON_H
#define BUTTON_H

#include "DigitalIn.h"

#include "MicroBitComponent.h"

#define MICROBIT_PIN_BUTTON_A                   P0_17
#define MICROBIT_PIN_BUTTON_B                   P0_26
#define MICROBIT_PIN_BUTTON_RESET               P0_19

#define MICROBIT_BUTTON_STATE                   1

#define MICROBIT_BUTTON_SIGMA_MIN               0
#define MICROBIT_BUTTON_SIGMA_MAX               12
#define MICROBIT_BUTTON_SIGMA_THRESH_HI         8
#define MICROBIT_BUTTON_SIGMA_THRESH_LO         2

class Button : public MicroBitComponent
{
    PinName name;                                           // mbed pin name for this button.
    DigitalIn pin;                                          // The mbed object looking after this pin at any point in time (may change!).

    uint8_t sigma;                                          // integration of samples over time. We use this for debouncing, and noise tolerance for touch sensing

    public:

    /**
      * Constructor.
      *
      * Create a software representation of a button.
      *
      * @param name the physical pin on the processor that should be used as input.
      *
      * @param id the ID of the new MicroBitButton object.
      *
      * @param eventConfiguration Configures the events that will be generated by this MicroBitButton instance.
      *                           Defaults to MICROBIT_BUTTON_ALL_EVENTS.
      *
      * @param mode the configuration of internal pullups/pulldowns, as defined in the mbed PinMode class. PullNone by default.
      *
      * @code
      * buttonA(MICROBIT_PIN_BUTTON_A, MICROBIT_ID_BUTTON_A);
      * @endcode
      */
    Button(PinName name, uint16_t id, PinMode mode = PullNone);

    /**
      * Tests if this Button is currently pressed.
      *
      * @code
      * if(buttonA.isPressed())
      *     display.scroll("Pressed!");
      * @endcode
      *
      * @return 1 if this button is pressed, 0 otherwise.
      */
    int isPressed();
    
    /**
      * periodic callback from MicroBit system timer.
      *
      * Check for state change for this button, and fires various events on a state change.
      */
    virtual void systemTick();

    /**
      * Destructor for MicroBitButton, where we deregister this instance from the array of fiber components.
      */
    ~Button();
};

#endif /* BUTTON_H */